{"ast":null,"code":"var _jsxFileName = \"C:\\\\bank-new\\\\bank\\\\src\\\\contexts\\\\SidebarContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useContext, useReducer } from \"react\";\nimport PropTypes from 'prop-types';\n\n//CHECK IF THE SIDEBAR IS OPEN OR NOT\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isOpen: false\n};\n\n//it takes the state and checks the action type which is toggling my sidebar and then returns the newly updated state...\nconst sidebarReducer = (state, action) => {\n  if (action.type === \"TOGGLE_SIDEBAR\") {\n    return {\n      ...state,\n      isSidebarOpen: !state.isSidebarOpen\n    };\n  }\n  throw new Error(`No matching \"${action.type} action type`);\n};\n\n//we create a context, so that we can share it across different components...\nexport const SidebarContext = /*#__PURE__*/createContext({});\n\n//creating provider, cuz we need a wrapper that provides the state and the functions to the components...\nexport const SidebarProvider = ({\n  children\n}) => {\n  _s();\n  //state holds the current state and dispatch is used to send actions to the reducer that handles these actions and update the state\n\n  const [state, dispatch] = useReducer(sidebarReducer, initialState);\n  const toggleSidebar = () => {\n    dispatch({\n      type: \"TOGGLE_SIDEBAR \"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SidebarContext.Provider, {\n    value: {\n      ...state,\n      toggleSidebar\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(SidebarProvider, \"UrEkDPQH5U12xnblC9PjDJeyoVE=\");\n_c = SidebarProvider;\nSidebarProvider.propTypes = {\n  children: PropTypes.node\n};\nvar _c;\n$RefreshReg$(_c, \"SidebarProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useReducer","PropTypes","jsxDEV","_jsxDEV","initialState","isOpen","sidebarReducer","state","action","type","isSidebarOpen","Error","SidebarContext","SidebarProvider","children","_s","dispatch","toggleSidebar","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","$RefreshReg$"],"sources":["C:/bank-new/bank/src/contexts/SidebarContext.js"],"sourcesContent":["import React, {createContext, useState, useContext, useReducer} from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n//CHECK IF THE SIDEBAR IS OPEN OR NOT\r\nconst initialState={\r\n    isOpen:false\r\n}\r\n\r\n//it takes the state and checks the action type which is toggling my sidebar and then returns the newly updated state...\r\nconst sidebarReducer = (state, action) => {\r\n    if(action.type === \"TOGGLE_SIDEBAR\"){\r\n        return { ...state, isSidebarOpen: !state.isSidebarOpen}\r\n    }\r\n    throw new Error(`No matching \"${action.type} action type`);\r\n}\r\n\r\n//we create a context, so that we can share it across different components...\r\nexport const SidebarContext=createContext({})\r\n\r\n        \r\n//creating provider, cuz we need a wrapper that provides the state and the functions to the components...\r\nexport const SidebarProvider=({children})=>{\r\n\r\n    //state holds the current state and dispatch is used to send actions to the reducer that handles these actions and update the state\r\n\r\n    const [state,dispatch]= useReducer(sidebarReducer, initialState);\r\n    const toggleSidebar =()=>{\r\n        dispatch({type:\"TOGGLE_SIDEBAR \"})\r\n    }\r\n\r\n    return (\r\n        <SidebarContext.Provider value={\r\n            {...state,\r\n            toggleSidebar    \r\n            } }>\r\n                {children}\r\n            </SidebarContext.Provider>\r\n    )\r\n}\r\n\r\n\r\nSidebarProvider.propTypes = {\r\n    children: PropTypes.node\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,QAAO,OAAO;AAC5E,OAAOC,SAAS,MAAM,YAAY;;AAGlC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAC;EACfC,MAAM,EAAC;AACX,CAAC;;AAED;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,IAAGA,MAAM,CAACC,IAAI,KAAK,gBAAgB,EAAC;IAChC,OAAO;MAAE,GAAGF,KAAK;MAAEG,aAAa,EAAE,CAACH,KAAK,CAACG;IAAa,CAAC;EAC3D;EACA,MAAM,IAAIC,KAAK,CAAE,gBAAeH,MAAM,CAACC,IAAK,cAAa,CAAC;AAC9D,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,gBAACf,aAAa,CAAC,CAAC,CAAC,CAAC;;AAG7C;AACA,OAAO,MAAMgB,eAAe,GAACA,CAAC;EAACC;AAAQ,CAAC,KAAG;EAAAC,EAAA;EAEvC;;EAEA,MAAM,CAACR,KAAK,EAACS,QAAQ,CAAC,GAAEhB,UAAU,CAACM,cAAc,EAAEF,YAAY,CAAC;EAChE,MAAMa,aAAa,GAAEA,CAAA,KAAI;IACrBD,QAAQ,CAAC;MAACP,IAAI,EAAC;IAAiB,CAAC,CAAC;EACtC,CAAC;EAED,oBACIN,OAAA,CAACS,cAAc,CAACM,QAAQ;IAACC,KAAK,EAC1B;MAAC,GAAGZ,KAAK;MACTU;IACA,CAAG;IAAAH,QAAA,EACEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAEtC,CAAC;AAAAR,EAAA,CAjBYF,eAAe;AAAAW,EAAA,GAAfX,eAAe;AAoB5BA,eAAe,CAACY,SAAS,GAAG;EACxBX,QAAQ,EAAEb,SAAS,CAACyB;AACxB,CAAC;AAAA,IAAAF,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}